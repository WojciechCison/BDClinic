#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MedicalClinic
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Clinic")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAppointment(Appointment instance);
    partial void UpdateAppointment(Appointment instance);
    partial void DeleteAppointment(Appointment instance);
    partial void InsertExam_Dictionary(Exam_Dictionary instance);
    partial void UpdateExam_Dictionary(Exam_Dictionary instance);
    partial void DeleteExam_Dictionary(Exam_Dictionary instance);
    partial void InsertExamination_Laboratory(Examination_Laboratory instance);
    partial void UpdateExamination_Laboratory(Examination_Laboratory instance);
    partial void DeleteExamination_Laboratory(Examination_Laboratory instance);
    partial void InsertExamination_Physical(Examination_Physical instance);
    partial void UpdateExamination_Physical(Examination_Physical instance);
    partial void DeleteExamination_Physical(Examination_Physical instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::MedicalClinic.Properties.Settings.Default.ClinicConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Appointment> Appointment
		{
			get
			{
				return this.GetTable<Appointment>();
			}
		}
		
		public System.Data.Linq.Table<Exam_Dictionary> Exam_Dictionary
		{
			get
			{
				return this.GetTable<Exam_Dictionary>();
			}
		}
		
		public System.Data.Linq.Table<Examination_Laboratory> Examination_Laboratory
		{
			get
			{
				return this.GetTable<Examination_Laboratory>();
			}
		}
		
		public System.Data.Linq.Table<Examination_Physical> Examination_Physical
		{
			get
			{
				return this.GetTable<Examination_Physical>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patient
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staff
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Appointment")]
	public partial class Appointment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_Appointment;
		
		private System.DateTime _Date_Appointment;
		
		private int _Id_Doctor;
		
		private int _Id_Eeceptionist;
		
		private string _Descirption;
		
		private string _Diagnosis;
		
		private int _Id_Patient;
		
		private string _State;
		
		private EntitySet<Examination_Laboratory> _Examination_Laboratory;
		
		private EntitySet<Examination_Physical> _Examination_Physical;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Staff> _Staff;
		
		private EntityRef<Staff> _Staff1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_AppointmentChanging(int value);
    partial void OnId_AppointmentChanged();
    partial void OnDate_AppointmentChanging(System.DateTime value);
    partial void OnDate_AppointmentChanged();
    partial void OnId_DoctorChanging(int value);
    partial void OnId_DoctorChanged();
    partial void OnId_EeceptionistChanging(int value);
    partial void OnId_EeceptionistChanged();
    partial void OnDescirptionChanging(string value);
    partial void OnDescirptionChanged();
    partial void OnDiagnosisChanging(string value);
    partial void OnDiagnosisChanged();
    partial void OnId_PatientChanging(int value);
    partial void OnId_PatientChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    #endregion
		
		public Appointment()
		{
			this._Examination_Laboratory = new EntitySet<Examination_Laboratory>(new Action<Examination_Laboratory>(this.attach_Examination_Laboratory), new Action<Examination_Laboratory>(this.detach_Examination_Laboratory));
			this._Examination_Physical = new EntitySet<Examination_Physical>(new Action<Examination_Physical>(this.attach_Examination_Physical), new Action<Examination_Physical>(this.detach_Examination_Physical));
			this._Patient = default(EntityRef<Patient>);
			this._Staff = default(EntityRef<Staff>);
			this._Staff1 = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Appointment", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_Appointment
		{
			get
			{
				return this._Id_Appointment;
			}
			set
			{
				if ((this._Id_Appointment != value))
				{
					this.OnId_AppointmentChanging(value);
					this.SendPropertyChanging();
					this._Id_Appointment = value;
					this.SendPropertyChanged("Id_Appointment");
					this.OnId_AppointmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_Appointment", DbType="DateTime NOT NULL")]
		public System.DateTime Date_Appointment
		{
			get
			{
				return this._Date_Appointment;
			}
			set
			{
				if ((this._Date_Appointment != value))
				{
					this.OnDate_AppointmentChanging(value);
					this.SendPropertyChanging();
					this._Date_Appointment = value;
					this.SendPropertyChanged("Date_Appointment");
					this.OnDate_AppointmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Doctor", DbType="Int NOT NULL")]
		public int Id_Doctor
		{
			get
			{
				return this._Id_Doctor;
			}
			set
			{
				if ((this._Id_Doctor != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_DoctorChanging(value);
					this.SendPropertyChanging();
					this._Id_Doctor = value;
					this.SendPropertyChanged("Id_Doctor");
					this.OnId_DoctorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Eeceptionist", DbType="Int NOT NULL")]
		public int Id_Eeceptionist
		{
			get
			{
				return this._Id_Eeceptionist;
			}
			set
			{
				if ((this._Id_Eeceptionist != value))
				{
					if (this._Staff1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_EeceptionistChanging(value);
					this.SendPropertyChanging();
					this._Id_Eeceptionist = value;
					this.SendPropertyChanged("Id_Eeceptionist");
					this.OnId_EeceptionistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descirption", DbType="VarChar(254)")]
		public string Descirption
		{
			get
			{
				return this._Descirption;
			}
			set
			{
				if ((this._Descirption != value))
				{
					this.OnDescirptionChanging(value);
					this.SendPropertyChanging();
					this._Descirption = value;
					this.SendPropertyChanged("Descirption");
					this.OnDescirptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Diagnosis", DbType="VarChar(254)")]
		public string Diagnosis
		{
			get
			{
				return this._Diagnosis;
			}
			set
			{
				if ((this._Diagnosis != value))
				{
					this.OnDiagnosisChanging(value);
					this.SendPropertyChanging();
					this._Diagnosis = value;
					this.SendPropertyChanged("Diagnosis");
					this.OnDiagnosisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Patient", DbType="Int NOT NULL")]
		public int Id_Patient
		{
			get
			{
				return this._Id_Patient;
			}
			set
			{
				if ((this._Id_Patient != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_PatientChanging(value);
					this.SendPropertyChanging();
					this._Id_Patient = value;
					this.SendPropertyChanged("Id_Patient");
					this.OnId_PatientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_Examination_Laboratory", Storage="_Examination_Laboratory", ThisKey="Id_Appointment", OtherKey="Id_Appointment")]
		public EntitySet<Examination_Laboratory> Examination_Laboratory
		{
			get
			{
				return this._Examination_Laboratory;
			}
			set
			{
				this._Examination_Laboratory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_Examination_Physical", Storage="_Examination_Physical", ThisKey="Id_Appointment", OtherKey="Id_Appointment")]
		public EntitySet<Examination_Physical> Examination_Physical
		{
			get
			{
				return this._Examination_Physical;
			}
			set
			{
				this._Examination_Physical.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Appointment", Storage="_Patient", ThisKey="Id_Patient", OtherKey="Id_Patient", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Appointment.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Appointment.Add(this);
						this._Id_Patient = value.Id_Patient;
					}
					else
					{
						this._Id_Patient = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Appointment", Storage="_Staff", ThisKey="Id_Doctor", OtherKey="Id_Staff", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Appointment.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Appointment.Add(this);
						this._Id_Doctor = value.Id_Staff;
					}
					else
					{
						this._Id_Doctor = default(int);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Appointment1", Storage="_Staff1", ThisKey="Id_Eeceptionist", OtherKey="Id_Staff", IsForeignKey=true)]
		public Staff Staff1
		{
			get
			{
				return this._Staff1.Entity;
			}
			set
			{
				Staff previousValue = this._Staff1.Entity;
				if (((previousValue != value) 
							|| (this._Staff1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff1.Entity = null;
						previousValue.Appointment1.Remove(this);
					}
					this._Staff1.Entity = value;
					if ((value != null))
					{
						value.Appointment1.Add(this);
						this._Id_Eeceptionist = value.Id_Staff;
					}
					else
					{
						this._Id_Eeceptionist = default(int);
					}
					this.SendPropertyChanged("Staff1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Examination_Laboratory(Examination_Laboratory entity)
		{
			this.SendPropertyChanging();
			entity.Appointment = this;
		}
		
		private void detach_Examination_Laboratory(Examination_Laboratory entity)
		{
			this.SendPropertyChanging();
			entity.Appointment = null;
		}
		
		private void attach_Examination_Physical(Examination_Physical entity)
		{
			this.SendPropertyChanging();
			entity.Appointment = this;
		}
		
		private void detach_Examination_Physical(Examination_Physical entity)
		{
			this.SendPropertyChanging();
			entity.Appointment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Exam_Dictionary")]
	public partial class Exam_Dictionary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Exam_Code;
		
		private string _Type;
		
		private string _Name;
		
		private EntitySet<Examination_Laboratory> _Examination_Laboratory;
		
		private EntitySet<Examination_Physical> _Examination_Physical;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExam_CodeChanging(string value);
    partial void OnExam_CodeChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Exam_Dictionary()
		{
			this._Examination_Laboratory = new EntitySet<Examination_Laboratory>(new Action<Examination_Laboratory>(this.attach_Examination_Laboratory), new Action<Examination_Laboratory>(this.detach_Examination_Laboratory));
			this._Examination_Physical = new EntitySet<Examination_Physical>(new Action<Examination_Physical>(this.attach_Examination_Physical), new Action<Examination_Physical>(this.detach_Examination_Physical));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exam_Code", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Exam_Code
		{
			get
			{
				return this._Exam_Code;
			}
			set
			{
				if ((this._Exam_Code != value))
				{
					this.OnExam_CodeChanging(value);
					this.SendPropertyChanging();
					this._Exam_Code = value;
					this.SendPropertyChanged("Exam_Code");
					this.OnExam_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_Dictionary_Examination_Laboratory", Storage="_Examination_Laboratory", ThisKey="Exam_Code", OtherKey="Exam_Code")]
		public EntitySet<Examination_Laboratory> Examination_Laboratory
		{
			get
			{
				return this._Examination_Laboratory;
			}
			set
			{
				this._Examination_Laboratory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_Dictionary_Examination_Physical", Storage="_Examination_Physical", ThisKey="Exam_Code", OtherKey="Exam_Code")]
		public EntitySet<Examination_Physical> Examination_Physical
		{
			get
			{
				return this._Examination_Physical;
			}
			set
			{
				this._Examination_Physical.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Examination_Laboratory(Examination_Laboratory entity)
		{
			this.SendPropertyChanging();
			entity.Exam_Dictionary = this;
		}
		
		private void detach_Examination_Laboratory(Examination_Laboratory entity)
		{
			this.SendPropertyChanging();
			entity.Exam_Dictionary = null;
		}
		
		private void attach_Examination_Physical(Examination_Physical entity)
		{
			this.SendPropertyChanging();
			entity.Exam_Dictionary = this;
		}
		
		private void detach_Examination_Physical(Examination_Physical entity)
		{
			this.SendPropertyChanging();
			entity.Exam_Dictionary = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Examination_Laboratory")]
	public partial class Examination_Laboratory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_Examination;
		
		private string _Comments_Doctor;
		
		private System.DateTime _Date_Of_Order;
		
		private string _Result;
		
		private string _State;
		
		private System.Nullable<System.DateTime> _Date_Exec_Cancel;
		
		private string _Comments_Man_Lab;
		
		private System.Nullable<System.DateTime> _Date_Conf_Cancel;
		
		private System.Nullable<int> _Id_Man_Lab;
		
		private System.Nullable<int> _Id_Analyst;
		
		private int _Id_Appointment;
		
		private string _Exam_Code;
		
		private EntityRef<Appointment> _Appointment;
		
		private EntityRef<Exam_Dictionary> _Exam_Dictionary;
		
		private EntityRef<Staff> _Staff;
		
		private EntityRef<Staff> _Staff1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_ExaminationChanging(int value);
    partial void OnId_ExaminationChanged();
    partial void OnComments_DoctorChanging(string value);
    partial void OnComments_DoctorChanged();
    partial void OnDate_Of_OrderChanging(System.DateTime value);
    partial void OnDate_Of_OrderChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnDate_Exec_CancelChanging(System.Nullable<System.DateTime> value);
    partial void OnDate_Exec_CancelChanged();
    partial void OnComments_Man_LabChanging(string value);
    partial void OnComments_Man_LabChanged();
    partial void OnDate_Conf_CancelChanging(System.Nullable<System.DateTime> value);
    partial void OnDate_Conf_CancelChanged();
    partial void OnId_Man_LabChanging(System.Nullable<int> value);
    partial void OnId_Man_LabChanged();
    partial void OnId_AnalystChanging(System.Nullable<int> value);
    partial void OnId_AnalystChanged();
    partial void OnId_AppointmentChanging(int value);
    partial void OnId_AppointmentChanged();
    partial void OnExam_CodeChanging(string value);
    partial void OnExam_CodeChanged();
    #endregion
		
		public Examination_Laboratory()
		{
			this._Appointment = default(EntityRef<Appointment>);
			this._Exam_Dictionary = default(EntityRef<Exam_Dictionary>);
			this._Staff = default(EntityRef<Staff>);
			this._Staff1 = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Examination", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id_Examination
		{
			get
			{
				return this._Id_Examination;
			}
			set
			{
				if ((this._Id_Examination != value))
				{
					this.OnId_ExaminationChanging(value);
					this.SendPropertyChanging();
					this._Id_Examination = value;
					this.SendPropertyChanged("Id_Examination");
					this.OnId_ExaminationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments_Doctor", DbType="VarChar(254)")]
		public string Comments_Doctor
		{
			get
			{
				return this._Comments_Doctor;
			}
			set
			{
				if ((this._Comments_Doctor != value))
				{
					this.OnComments_DoctorChanging(value);
					this.SendPropertyChanging();
					this._Comments_Doctor = value;
					this.SendPropertyChanged("Comments_Doctor");
					this.OnComments_DoctorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_Of_Order", DbType="DateTime NOT NULL")]
		public System.DateTime Date_Of_Order
		{
			get
			{
				return this._Date_Of_Order;
			}
			set
			{
				if ((this._Date_Of_Order != value))
				{
					this.OnDate_Of_OrderChanging(value);
					this.SendPropertyChanging();
					this._Date_Of_Order = value;
					this.SendPropertyChanged("Date_Of_Order");
					this.OnDate_Of_OrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="VarChar(254)")]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(9) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_Exec_Cancel", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date_Exec_Cancel
		{
			get
			{
				return this._Date_Exec_Cancel;
			}
			set
			{
				if ((this._Date_Exec_Cancel != value))
				{
					this.OnDate_Exec_CancelChanging(value);
					this.SendPropertyChanging();
					this._Date_Exec_Cancel = value;
					this.SendPropertyChanged("Date_Exec_Cancel");
					this.OnDate_Exec_CancelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments_Man_Lab", DbType="VarChar(254)")]
		public string Comments_Man_Lab
		{
			get
			{
				return this._Comments_Man_Lab;
			}
			set
			{
				if ((this._Comments_Man_Lab != value))
				{
					this.OnComments_Man_LabChanging(value);
					this.SendPropertyChanging();
					this._Comments_Man_Lab = value;
					this.SendPropertyChanged("Comments_Man_Lab");
					this.OnComments_Man_LabChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_Conf_Cancel", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date_Conf_Cancel
		{
			get
			{
				return this._Date_Conf_Cancel;
			}
			set
			{
				if ((this._Date_Conf_Cancel != value))
				{
					this.OnDate_Conf_CancelChanging(value);
					this.SendPropertyChanging();
					this._Date_Conf_Cancel = value;
					this.SendPropertyChanged("Date_Conf_Cancel");
					this.OnDate_Conf_CancelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Man_Lab", DbType="Int")]
		public System.Nullable<int> Id_Man_Lab
		{
			get
			{
				return this._Id_Man_Lab;
			}
			set
			{
				if ((this._Id_Man_Lab != value))
				{
					if (this._Staff1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_Man_LabChanging(value);
					this.SendPropertyChanging();
					this._Id_Man_Lab = value;
					this.SendPropertyChanged("Id_Man_Lab");
					this.OnId_Man_LabChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Analyst", DbType="Int")]
		public System.Nullable<int> Id_Analyst
		{
			get
			{
				return this._Id_Analyst;
			}
			set
			{
				if ((this._Id_Analyst != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_AnalystChanging(value);
					this.SendPropertyChanging();
					this._Id_Analyst = value;
					this.SendPropertyChanged("Id_Analyst");
					this.OnId_AnalystChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Appointment", DbType="Int NOT NULL")]
		public int Id_Appointment
		{
			get
			{
				return this._Id_Appointment;
			}
			set
			{
				if ((this._Id_Appointment != value))
				{
					if (this._Appointment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_AppointmentChanging(value);
					this.SendPropertyChanging();
					this._Id_Appointment = value;
					this.SendPropertyChanged("Id_Appointment");
					this.OnId_AppointmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exam_Code", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Exam_Code
		{
			get
			{
				return this._Exam_Code;
			}
			set
			{
				if ((this._Exam_Code != value))
				{
					if (this._Exam_Dictionary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExam_CodeChanging(value);
					this.SendPropertyChanging();
					this._Exam_Code = value;
					this.SendPropertyChanged("Exam_Code");
					this.OnExam_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_Examination_Laboratory", Storage="_Appointment", ThisKey="Id_Appointment", OtherKey="Id_Appointment", IsForeignKey=true)]
		public Appointment Appointment
		{
			get
			{
				return this._Appointment.Entity;
			}
			set
			{
				Appointment previousValue = this._Appointment.Entity;
				if (((previousValue != value) 
							|| (this._Appointment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Appointment.Entity = null;
						previousValue.Examination_Laboratory.Remove(this);
					}
					this._Appointment.Entity = value;
					if ((value != null))
					{
						value.Examination_Laboratory.Add(this);
						this._Id_Appointment = value.Id_Appointment;
					}
					else
					{
						this._Id_Appointment = default(int);
					}
					this.SendPropertyChanged("Appointment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_Dictionary_Examination_Laboratory", Storage="_Exam_Dictionary", ThisKey="Exam_Code", OtherKey="Exam_Code", IsForeignKey=true)]
		public Exam_Dictionary Exam_Dictionary
		{
			get
			{
				return this._Exam_Dictionary.Entity;
			}
			set
			{
				Exam_Dictionary previousValue = this._Exam_Dictionary.Entity;
				if (((previousValue != value) 
							|| (this._Exam_Dictionary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Exam_Dictionary.Entity = null;
						previousValue.Examination_Laboratory.Remove(this);
					}
					this._Exam_Dictionary.Entity = value;
					if ((value != null))
					{
						value.Examination_Laboratory.Add(this);
						this._Exam_Code = value.Exam_Code;
					}
					else
					{
						this._Exam_Code = default(string);
					}
					this.SendPropertyChanged("Exam_Dictionary");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Examination_Laboratory", Storage="_Staff", ThisKey="Id_Analyst", OtherKey="Id_Staff", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Examination_Laboratory.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Examination_Laboratory.Add(this);
						this._Id_Analyst = value.Id_Staff;
					}
					else
					{
						this._Id_Analyst = default(Nullable<int>);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Examination_Laboratory1", Storage="_Staff1", ThisKey="Id_Man_Lab", OtherKey="Id_Staff", IsForeignKey=true)]
		public Staff Staff1
		{
			get
			{
				return this._Staff1.Entity;
			}
			set
			{
				Staff previousValue = this._Staff1.Entity;
				if (((previousValue != value) 
							|| (this._Staff1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff1.Entity = null;
						previousValue.Examination_Laboratory1.Remove(this);
					}
					this._Staff1.Entity = value;
					if ((value != null))
					{
						value.Examination_Laboratory1.Add(this);
						this._Id_Man_Lab = value.Id_Staff;
					}
					else
					{
						this._Id_Man_Lab = default(Nullable<int>);
					}
					this.SendPropertyChanged("Staff1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Examination_Physical")]
	public partial class Examination_Physical : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_Examination;
		
		private string _Result;
		
		private string _Exam_Code;
		
		private int _Id_Appointment;
		
		private EntityRef<Appointment> _Appointment;
		
		private EntityRef<Exam_Dictionary> _Exam_Dictionary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_ExaminationChanging(int value);
    partial void OnId_ExaminationChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    partial void OnExam_CodeChanging(string value);
    partial void OnExam_CodeChanged();
    partial void OnId_AppointmentChanging(int value);
    partial void OnId_AppointmentChanged();
    #endregion
		
		public Examination_Physical()
		{
			this._Appointment = default(EntityRef<Appointment>);
			this._Exam_Dictionary = default(EntityRef<Exam_Dictionary>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Examination", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id_Examination
		{
			get
			{
				return this._Id_Examination;
			}
			set
			{
				if ((this._Id_Examination != value))
				{
					this.OnId_ExaminationChanging(value);
					this.SendPropertyChanging();
					this._Id_Examination = value;
					this.SendPropertyChanged("Id_Examination");
					this.OnId_ExaminationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="VarChar(254)")]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exam_Code", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Exam_Code
		{
			get
			{
				return this._Exam_Code;
			}
			set
			{
				if ((this._Exam_Code != value))
				{
					if (this._Exam_Dictionary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExam_CodeChanging(value);
					this.SendPropertyChanging();
					this._Exam_Code = value;
					this.SendPropertyChanged("Exam_Code");
					this.OnExam_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Appointment", DbType="Int NOT NULL")]
		public int Id_Appointment
		{
			get
			{
				return this._Id_Appointment;
			}
			set
			{
				if ((this._Id_Appointment != value))
				{
					if (this._Appointment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_AppointmentChanging(value);
					this.SendPropertyChanging();
					this._Id_Appointment = value;
					this.SendPropertyChanged("Id_Appointment");
					this.OnId_AppointmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_Examination_Physical", Storage="_Appointment", ThisKey="Id_Appointment", OtherKey="Id_Appointment", IsForeignKey=true)]
		public Appointment Appointment
		{
			get
			{
				return this._Appointment.Entity;
			}
			set
			{
				Appointment previousValue = this._Appointment.Entity;
				if (((previousValue != value) 
							|| (this._Appointment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Appointment.Entity = null;
						previousValue.Examination_Physical.Remove(this);
					}
					this._Appointment.Entity = value;
					if ((value != null))
					{
						value.Examination_Physical.Add(this);
						this._Id_Appointment = value.Id_Appointment;
					}
					else
					{
						this._Id_Appointment = default(int);
					}
					this.SendPropertyChanged("Appointment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_Dictionary_Examination_Physical", Storage="_Exam_Dictionary", ThisKey="Exam_Code", OtherKey="Exam_Code", IsForeignKey=true)]
		public Exam_Dictionary Exam_Dictionary
		{
			get
			{
				return this._Exam_Dictionary.Entity;
			}
			set
			{
				Exam_Dictionary previousValue = this._Exam_Dictionary.Entity;
				if (((previousValue != value) 
							|| (this._Exam_Dictionary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Exam_Dictionary.Entity = null;
						previousValue.Examination_Physical.Remove(this);
					}
					this._Exam_Dictionary.Entity = value;
					if ((value != null))
					{
						value.Examination_Physical.Add(this);
						this._Exam_Code = value.Exam_Code;
					}
					else
					{
						this._Exam_Code = default(string);
					}
					this.SendPropertyChanged("Exam_Dictionary");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_Patient;
		
		private string _Name;
		
		private string _Surname;
		
		private string _PESEL;
		
		private EntitySet<Appointment> _Appointment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_PatientChanging(int value);
    partial void OnId_PatientChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnPESELChanging(string value);
    partial void OnPESELChanged();
    #endregion
		
		public Patient()
		{
			this._Appointment = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointment), new Action<Appointment>(this.detach_Appointment));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Patient", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_Patient
		{
			get
			{
				return this._Id_Patient;
			}
			set
			{
				if ((this._Id_Patient != value))
				{
					this.OnId_PatientChanging(value);
					this.SendPropertyChanging();
					this._Id_Patient = value;
					this.SendPropertyChanged("Id_Patient");
					this.OnId_PatientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PESEL", DbType="NChar(11)")]
		public string PESEL
		{
			get
			{
				return this._PESEL;
			}
			set
			{
				if ((this._PESEL != value))
				{
					this.OnPESELChanging(value);
					this.SendPropertyChanging();
					this._PESEL = value;
					this.SendPropertyChanged("PESEL");
					this.OnPESELChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Appointment", Storage="_Appointment", ThisKey="Id_Patient", OtherKey="Id_Patient")]
		public EntitySet<Appointment> Appointment
		{
			get
			{
				return this._Appointment;
			}
			set
			{
				this._Appointment.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appointment(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Appointment(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_Staff;
		
		private string _Name;
		
		private string _Surname;
		
		private string _Role;
		
		private string _Login;
		
		private string _Password;
		
		private System.Nullable<char> _Active;
		
		private EntitySet<Appointment> _Appointment;
		
		private EntitySet<Appointment> _Appointment1;
		
		private EntitySet<Examination_Laboratory> _Examination_Laboratory;
		
		private EntitySet<Examination_Laboratory> _Examination_Laboratory1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_StaffChanging(int value);
    partial void OnId_StaffChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnActiveChanging(System.Nullable<char> value);
    partial void OnActiveChanged();
    #endregion
		
		public Staff()
		{
			this._Appointment = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointment), new Action<Appointment>(this.detach_Appointment));
			this._Appointment1 = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointment1), new Action<Appointment>(this.detach_Appointment1));
			this._Examination_Laboratory = new EntitySet<Examination_Laboratory>(new Action<Examination_Laboratory>(this.attach_Examination_Laboratory), new Action<Examination_Laboratory>(this.detach_Examination_Laboratory));
			this._Examination_Laboratory1 = new EntitySet<Examination_Laboratory>(new Action<Examination_Laboratory>(this.attach_Examination_Laboratory1), new Action<Examination_Laboratory>(this.detach_Examination_Laboratory1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Staff", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id_Staff
		{
			get
			{
				return this._Id_Staff;
			}
			set
			{
				if ((this._Id_Staff != value))
				{
					this.OnId_StaffChanging(value);
					this.SendPropertyChanging();
					this._Id_Staff = value;
					this.SendPropertyChanged("Id_Staff");
					this.OnId_StaffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Char(1)")]
		public System.Nullable<char> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Appointment", Storage="_Appointment", ThisKey="Id_Staff", OtherKey="Id_Doctor")]
		public EntitySet<Appointment> Appointment
		{
			get
			{
				return this._Appointment;
			}
			set
			{
				this._Appointment.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Appointment1", Storage="_Appointment1", ThisKey="Id_Staff", OtherKey="Id_Eeceptionist")]
		public EntitySet<Appointment> Appointment1
		{
			get
			{
				return this._Appointment1;
			}
			set
			{
				this._Appointment1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Examination_Laboratory", Storage="_Examination_Laboratory", ThisKey="Id_Staff", OtherKey="Id_Analyst")]
		public EntitySet<Examination_Laboratory> Examination_Laboratory
		{
			get
			{
				return this._Examination_Laboratory;
			}
			set
			{
				this._Examination_Laboratory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Examination_Laboratory1", Storage="_Examination_Laboratory1", ThisKey="Id_Staff", OtherKey="Id_Man_Lab")]
		public EntitySet<Examination_Laboratory> Examination_Laboratory1
		{
			get
			{
				return this._Examination_Laboratory1;
			}
			set
			{
				this._Examination_Laboratory1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appointment(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Appointment(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_Appointment1(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Staff1 = this;
		}
		
		private void detach_Appointment1(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Staff1 = null;
		}
		
		private void attach_Examination_Laboratory(Examination_Laboratory entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Examination_Laboratory(Examination_Laboratory entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_Examination_Laboratory1(Examination_Laboratory entity)
		{
			this.SendPropertyChanging();
			entity.Staff1 = this;
		}
		
		private void detach_Examination_Laboratory1(Examination_Laboratory entity)
		{
			this.SendPropertyChanging();
			entity.Staff1 = null;
		}
	}
}
#pragma warning restore 1591
